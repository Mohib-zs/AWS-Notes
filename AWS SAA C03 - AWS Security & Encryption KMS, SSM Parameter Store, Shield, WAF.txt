Anytime you hear encryption for an AWS Service, its most likely KMS, AWS managed these encryption keys for us via KMS, fully integrated with IAM for authorization. Able to audit KMS key usage using CloudTrail. Symmetric (AES-256) uses single encryption key for encrypt and decrypt, used for operations which remain inside AWS via KMS API. Assymetric (RSA) keys use public private keys, used for encryption outside of AWS by users who can't call the KMS API.

Types of Keys are AWS Owned Keys, like SSE-S3, SSE-SQS, SSE-DDB (which are free), AWS Managed Key (als free) which start with aws/* e.g aws/rds or aws/ebs. Customer managed keys (CMK) created in KMS take 1$/month, while CMK imported also take 1$/month. AWS Managed KMS key auto-rotates every 1 year, Customer managed KMS can also auto-rotate on-demand (must be enabled) while Imported KMS key only has manual rotation using alias.

EBS volume encrypted with KMS Key A in region A can be copied to Region B by taking a snapshot (which will also be encrypted), then copy the snapshot to region B which is also encrypted but with KMS Key B (since 1 KMS key cannot live in the two regions), then restore the volume also encrypted with KMS key B.

You cannot access a KMS key if it doesn't have a KMS key policy in place (even if you have the IAM role for it). Default KMS key policy allows everyone complete access to the key in the account if they have permission to access KMS. Custom KMS key policy define users, roles that can access the KMS key, who can administer it and allows cross-account access of the key.

Cross-account KMS policy are used when for e.g a snapshot of EBS in account A is encrypted with KMS key, and the snapshot is copied to a different account B, then we create a copy of that snapshot with a CMK in account B then create a volume from the snapshot.

KMS Multi-Region Keys are identical KMS keys in different AWS Regions that can be used interchangeably. Multi-Region Keys have the same key ID, key material, automatic rotation. Encrypt in one region and decrypt in other regions so there is no need to re-encrypt or make cross-Region API calls. KMS Multi-region are NOT global (Primary key + Replica keys) and each multi-region key is managed independently. Use cases are global client-side encryption, encryption on Global DynamoDB, Global Aurora. In Global Aurora, we can encrypt specific attributes client-side in our Aurora table using the Encryption SDK, combined with Aurora Global Tables, the client-side encrypted data is replicated to other regions. If we use multi-region key, replicated in the same region as the Global Aurora DB, then clients in these regions can use low-latency API calls to KMS in their region to decrypt the data client-side.

S3 with unencrypted objects and objects with SSE-S3 are replicated by default, objects encrypted with SSE-C can be replicated. For objects encrypted with SSE-KMS, you need to enable the option. Specify which KMS Key to encrypt the objects with the target bucket, Adapt the KMS Key Policy for the target key. An IAM Role for S3 Replication service with kms:Decrypt for the source KMS key and kms:Encrypt for the target KMS Key. You might get KMS throttling errors because of too much encryption/decryption in which case you can ask for Service Quotas increase. We can use multi-region KMS key with S3 replication but they still will be treated as independent keys, meaning that the objects will still be decrypted at source and encrypted at destination.

To share an encrypted AMI with KMS in account A to account B, one must modify the image attribute to add a launch permission for the specified AWS account, also create a KMS key policy which allows cross account access. Then create an IAM role in account B which can access the KMS key info, and then we can create a ec2 instance in account B.

SSM Parameter Store is secure storage for configuration and secrets. Optional seamless encryption using KMS. Serverless, scalable, durable, easy SDK. Version tracking of configurations/secrets. Integrates with CloudFormation. Uses Filsystem like hierarchy and secrets are stored in /aws/reference/secretsmanager/secret_ID_Secrets_Manager