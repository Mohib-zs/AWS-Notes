Domain Registrar's are Amazon Route 53, GoDaddy etc.
DNS Records: A, AAAA, CNAME, NS,.. (must knows)
Zone File: Contains DNS Records
Name Server: Resolves DNS queries (Authoritative or Non-Authoritative)
Top Level Domain (TLD):.com, .us, .in, .gov, .org, ...
Second Level Domain (SLD): amazon.com, google.com,..

in http://api.www.example.com. 	
. in the end is root, .com is TLD, .example.com is SLD, .www.example.com. is sub-domain and api.www.example.com is the FQDN and http:// is the protocol. FQDNs do not include the protocol (https://) or path (/products) — that’s part of the URL, not the domain. https://blog.shop.example.com/products is a URL.

TTL (Time To Live) is the amount of time the record is cached at DNS Resolvers. Routing policy is how Route 53 responds to queries. A record maps hostname to IPv4, AAAA maps hostname to IPv6, CNAME maps a hostname to another hostname, where target is a domain name with A or AAAA record. Can't create a CNAME record for the top node of a DNS namespace (zone apex) example you can't create for example.com but can create for www.example.com, NS (Name Server) for the hosted zone controls how traffic is routed for a domain.

Hosted Zones is a container for records that define how to route traffic to domains and their subdomains, pulic-hosted zones cotain records of how you route traffic to public domains while private-hosted zones contain records that specify how you route traffic to private domains defined in one or more VPCs or internal networks. You pay $0.50 per month per hosted zone you create in Amazon Route 53 and $12 per year for each domain you register in it. Enable auto-renew to auto-renew domain after 1 year if required. 

High TTL e.g 24 HR means less traffic on route 53 but clients will possibly have outdated records and will have to wait 24HR to get new record change, Low TTL e.g 60 sec means more traffic on Route 53 and more kharcha ($$) but records are outdated for less time means if you make A record change, client can access the new record after 60 seconds, easy to change records. Except for Alias records, TTL is mandatory for each DNS record. 

Pointing a hostname to another hostname, you can use CNAME for this (app.mydomain.com > something.anything.com) but only for NON ROOT DOMAIN so can't use "domain.com" you would rather use app.domain.com. Alias can also be used to point a hostname to an AWS resource  (app.mydomain.com > something.amazonaws.com) and it works for both ROOT AND NON ROOT DOMAIN and it is free of charge with native health check capability. Alias or ANAME is AWS/provide-specific not standard. Automatically recognizes changes in the resource's ip changes since it resolves to the ip of the hostname it is mapped to. Unlike CNAME, it can be used for Top node of a DNS Namespace (zone apex) e.g example.com. Alias record is of type A/AAAA for AWS resources (IPv4/IPv6), you can't set the TTL.

Alias Record targets are:
ELB (ALB, NLB)
CLoudFront Distributions
API Gateway
Elastic Beanstalk environments
S3 Websites endpoint (when buckets are enabled as websites)
VPC Interface Endpoints
Global Accelerator accelerator
Route 53 record in the same hosted zone

You cannot set an alias record for an EC2 DNS name.

Routing policies define how Route 53 responds to DNS queries, it's not the same as LoadBalancer routing which routes the traffic. DNS does not route traffic rather responds to DNS queries. Following are the routing policies

Simple routing policy routes to a single resource, though you can specify multiple values in the same record, if multiple values are returned, a random value would be chosen by client, only one AWS resource can be specified when AWS resource is enabled though it can't be associated with health checks.

Weighted routing policy uses weights to control the % of requests that go to each specific resource. Assign each record a relative weight, doesnt need to sum up to 100. DNS records must have the same name and type, can be associated with health checks. Use cases: load balancing between regions, testing new application versions, assign a weight of record 0 to stop sending traffic to a resource and if all records have 0 then all will be returned equally. weight value can be between 0 and 255.

Latency-based routing policy redirects clients to the resource that has the least latency close to us, super helpful when latency for users is a priority. Latency is based on traffic between users and AWS Regions. This means if user is in Germany and closest AWS resource is in US then that user would be redirected to the US resource. Can be associated with health-checks and has a failover capability.

Connecting to the VPN automatically clears out all the TTL from the DNS cache in your local laptop.

HTTP Health checks are only for public resources, Health checks helps in performing Automated DNS failover by performing health checks that monitor and endpoint (application, server or other AWS resource), perform health checks that monitor other health checks (calculated health checks), health checks that monitor CloudWatch Alarms (full control!!) - e.g throttles of DynamoDB, alarms on RDS, custom metrics etc. (helpful for private resources). Health checks are integrated with CW metrics. About 15 global health checkers will check the endpoint health, check threshold for healthy/unhealthy (3 is default) meaning the number of times health checks fail to be deemed unhealthy, Interval is 30 sec (can set to 10 sec (fast health check) - higher cost). If > 18% health checkers report the endpoint is healthy, Route 53 considers it Healthy, Otherwise it is Unhealthy. Also have ability to choose which locations you want Route 53 to use. Health checks pass when enpoints responds with 2xx amd 3xx HTTP codes. They can be setup to pass/fail based on the text in the first 5120 bytes of the response. Configure your router/firewall to allow inbound requests from Route 53 health checkers. Can check latency graphs to see how latency evolves overtime.

Calculated health checks combines the results of multiple health checks into a single health check, you can use OR, AND or NOT. Can monitor up to 256 health checks and specify how many how many health checks must pass to make the parent pass. Its like a cluster with multiple child nodes performing checks and reporting to the parent node. Usecase is to perform maintainance to your website without causing all health checks to fail.

Route 53 health checkers are outside the VPC and can't access private endpoints of VPC or on-prem resources. To perform health check on private resource simply setup cloudwatch metric on private resource and associate it with a cloudwatch alarm then create a health check that checks the alarm itself.

Failover routing policy is a active-passive policy in which Route 53 has two or more records (or instances) with health checks enabled (mandatory for primary) One is called primary and other secondary - DR. When request is made to route 53, request is forwarded to primary record and if health check of primary is unhealthy then request is automatically forwarded to secondary hence performing an automated failover.

Geolocation routing policy is based on user location and is different from latency based routing. It routes on specific location by continent, country or by US State (if there's overlapping, most precise location is selected). Create a default record in case there's no match on location. Use cases: website localization like record of location france will provide french version of app to users routing from france, same with germany for german, and a default english version for the rest of the world. Its also used for content distribution and load balancing and can be associated with Health Checks.

Geoproximity routing policy allows you to route traffic to your resources based on the geographic location of users and resources. It provides the ability to shift more traffic to specific resources using a defined bias value. To expand value - (1 to 99) and to shrink value (-1 to -99). The geoproximity bias is really helpful when you need to shift traffic from one region to another, by increasing the bias. Resources can be AWS resources (specify AWS region) and Non-AWS resources (specify Latitude and Longitude).You must use Route 53 Traffic Flow (advanced) to use this feature.

IP-based routing policy is based on client's ip addresses. Provide a list of CIDRs for your clients and the corresponding endpoints/locations (user-IP-to-endpoint mappings). Usecases: Optimize performance, reduce network costs.. e/g is to route endusers from a particular ISP to a specifi endpoint.

Multi-value routing policy is quite similar to simple routing policy which also takes multiple Ipv4 values as input but multi-value creates a separate record for each value and also allows health-checks.

Domain registrar is where you buy or register your domain name by paying annual charges e.g GoDaddy and Amazon Registrar Inc. Usually they also provide you with DNS service but you can use a different DNS service to manage your DNS records e.g Amazon Route 53. For e.g GoDaddy provides you DNS service for your record or Domain by providing you with name servers. To use Route 53 as DNS service, simply create a hosted zone in Route 53, this will provide you with its own name servers with their urls. Change the name server for the record in GoDaddy by assigning route 53 name server URLS and your domain will now be managed by Route 53.