Deploying multiple applications/Services will require to communicate with each other. Services communicating directly with each other is all synchronous communication with no middleware. Services communicatitng to a queue is called asynchronous communication with a queue as middleware. Issue with sync comms is that if one services has a traffic spike, the whole app would crash. Async comms will decouple services so that if one fails, the rest work as is since they are talking to a queue rather than the service. For decoupling you can use SQS: Queue model; SNS: pub/sub model; Kinesis: real-time streaming model.

A queue basically takes messages from services called producers (like process a video or order), then services called consumers will pull the messages from the queue from the other end, once the message is processed, it gets deleted from the queue.

Amazon SQS - standard queue is the oldest offering (10 years old) and is a fully managed service used to decouple applications. SQS provides unlimited throughput, unlimited number of messages in queue, default retention of messages is 4 days and max 14 days, low latency of about <10ms on pub and receive. Limitation of 256KB per message sent. Can have duplicate messages (at least once delivery, occasionally), can have out of order messages (best effort ordering). Message is produced to SQS using the SDK (SendMessage API). The message is persisted in SQS until a consumer deletes it. Example send an order to be processed with custom attributes like order id, customer id etc.