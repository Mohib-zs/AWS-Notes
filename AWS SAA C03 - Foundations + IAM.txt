Choosing a region depends on three things
* Compliance, if a government wants it's data in their own country like France, host your infra and application in France.
* Proximity, your application should be hosted in a region close to your users. 
* Availability, not every service is available everywhere. 
* Pricing, each service is priced differently in different regions.

A region in AWS has min 3 azs and max 6 azs. Each az has multiple data centers. Points of presence are also known as edge locations used by CDNs so content can be delivered faster.

Global services in AWS are IAM, route 53, CloudFront and WAF. Region scoped services are EC2, elastic Beanstalk, Lambda, Rekognition. Checkout region table for more info

IAM policies in json consists of Effect, what would happen (Allow/Deny), Action, on performing what operations (read, write, describe, list) and Resource (ec2, s3) on what resources, could b specific e.g my-s3-bucket. Principal, the IAM user (AWS iam/root), Sid (1), unique identifiers for the statement, Id, identifier for the policy.

Inline policies in IAM are policies assigned to an individual user. If a user belongs to two groups simultaneously, they will get permissions applied on both groups.

IAM - Password Policy, for stronger passwords which is higher security, In AWS a password policy can be to set a minimum password length, require specific character types like uppercase, lowercase letters, numbers and non alphanumeric characters. Allow all IAM users to change their own passwords and Requires users to change their password after some time. Prevent password reuse. Helps against brute force.

MFA options in AWS are Virual MFA using authenticator and Universal 2nd Factor U2F security key which provides support for multiple root and IAM users using a single security key. Hardware key Fob MFA device is also an option. There is one for Gov AWS as well.

Access to AWS is allowed in three methods. AWS management console (protected by password + MFA), AWS Command Line Interface (CLI) and AWS SDK (Boto3 in python and other lang sdks) protected by access keys. Access keys are generated through the console. Access key id is username while secret access key is password. AWS CLI and Sdk (used for scripting) are open source which directly interact with AWS API. The CLI is an alternative to AWS console. There are mobile and IoT device sdks as well. 

IAM roles consist of one or more policies that are assigned to all AWS services (e.g ec2, s3) not physical users to access other services on your behalf. Roles can be applied to services in other AWS accounts to access services in this account, to users federated by external web ID providers to perform actions in this account, users federated by SAML 2.0 and you can create a custom policy.

IAM Security tools include:
IAM Credentials Report (account-level) to list all account users and the status of their various credentials. Download a .csv file and check the users and their credentials report.

IAM Access Advisor (user-level) to show the service permissions granted to a user when those services were last accessed. This info helps you revise your policies. Go to users and to last access to check which services were accessed and when and which they are allowed to access with what policies and permissions.

IAM Summary:
Users are mapped to a physical user for AWS console. Groups contain users, Policies are json documents that outline permission for users or groups, Roles are for EC2 instances or AWS services, security is MFA + strong password policy, AWS CLI is to manage services using CLI and AWS SDK is to manage service using a programming language, Access keys are keys to access AWS using CLI or SDK. Credentials report and IAM Accesss advisor are used for Auditing IAM and it's users.

AWS Organizations is a global service used to manage multiple AWS accounts. Main account is management account and others are member accounts (which can only be part of one organization) Consolidated Billing across all accounts with a single payment method. Pricing benefits from aggregated usage e.g volume discount for EC2, S3. Shared reserved instances and savings plan discounts and API is there for account creation. Advantages are that its better to have multi-account than multi-vpc, tagging standards for billing, Cross Account roles for admin purposes, CloudTrail and CloudWatch Logs to central S3 and logging accounts. Security with IAM policies applied to restrict users and roles. Do not apply at management accounts. There must be specific allow gate b/w root and OU account for actions to happen. Service Control Policies (SCP) ensure central control over all AWS accounts to ensure that each account has proper permissions setup and comply with organization guidelines.
 
IAM Conditions are used to allow or deny requests or API calls from everyone except for something specific (e.g Deny all traffic except from a specific CIDR range or from specific regions) or Allow to start EC2 instance if the instance tag is Data or DataAnalytics

IAM Roles vs Resource Based Policy: For Cross Account access you can either:

* Attach a resource based policy (e.g S3 bucket policy) to S3 in account A so that it can be accessed by account B

* OR, Account A must first access account B, assume an IAM role that allows it to access the bucket in account B, then access the bucket. Both work fine.

However, issues with IAM Roles is if a user, app or service assumes a role, it loses all its other permissions. But when we use resource-based-policy then the principal doesn't have to give up his permissions. Example of User A needs to scan DynamoDB table in Account A and dump it in S3 bucket in Account, use Resource access policies. In EventBridge, when a rule runs it needs permissions on the target, for Lambda, SQS, SNS, S3 and API Gateway, Rule will use resource-based-policies while for KDS, EC2 ASG. Systems Manager, ECS Task it will use roles.

IAM Permission boundary can apply at user or role level not group. It limits the area at which the permissions can apply, meaning if a user has admin access to account, but the permission boundary limits him to S3, he only has admin level access for the S3 service. IAM Permission boundaries are used in combinations with Organization SCP and Identity based policies. This helps non-admin users escalate their own permissions on need-basis while they stay within a limit. 

In am IAM Policy for a user, if there is an explicit deny for something e.g SQS:* then the user will be denied to do anything to SQS. If there is SQS:DeleteQueue as allow in same policy, still will be denied because 1 explicit deny > 100 allows. And if the user wants to access Ec2, but policy doesn't say anything for Ec2, its still deny since all is denied at start and an explicit mention of resource with allow must be there with no conflicting deny for access to resource.

AWS IAM Identity Center (successor to AWS SSO) is a one login for all you AWS accounts in AWS Org plus Business Cloud apps (e.g salesforce, Box, MS 365) and any application which has SAML2.0 enabled along with EC2 Window Instances. The identity provider can be built-in identity store IAM Identity center or 3rd party like AD, OneLogin, Okta. Permission sets are used to define what the users in the identity store can access in the AWS Account(s). Attribute Based Access Control (ABAC) is for fine-grained permissions based on user's attributes stored in IAM Identity Center. (e.g titles like junior, senior. So you define permission sets once then provide permission based on the users attributes which is their title like junior, senior in this example)

AWS Directory services include AWS Managed Microsoft AD that creates your own AD in AWS, manage users locally. Establish trust connections between AWS managed AD and On-prem AD, allowing user of AWS AD to access on-prem resources and on-prem AD user accessing AWS. Second is AD Connector where users are only stored in On-prem AD and the connector works as a proxy for the user to access both AWS and on-prem. Simple AD is managed AD on AWS which can't be joined with on-prem AD. IAM Identity Center can connect with AWS Managed AD directly, but for on-prem AD connection, either go through AWS Managed AD with trust connection on on-prem AD if you have users on both cloud and on-prem, but if users are only in on-prem ad then use AD connector. AWS Managed AD supports MFA, simple AD doesn't.

AWS Control Tower is an easy way to set up and govern a secure and compliant multi-account AWS environment based on best practices. AWS Control Tower uses AWS Organizations to create accounts. Benefits include automation of environment setup in few clicks along with ongoing policy management using guardrails. Detect policy violations and remediation and monitor compliance via interactive dashboard. Preventive GuardRail use SCPs (e.g Restrict Regions across all your accounts) and detective guardrail uses AWS config (e.g identify untagged resources)

aws:RequiredRegion is a IAM condition key you can use only to allow API calls to a specified AWS region.